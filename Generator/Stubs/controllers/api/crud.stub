<?php

declare(strict_types=1);

namespace App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Controllers;

use Apiato\Core\Exceptions\CoreInternalErrorException;
use Apiato\Core\Exceptions\IncorrectIdException;
use Apiato\Core\Exceptions\InvalidTransformerException;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Create{{model}}Action;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Delete{{model}}Action;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Find{{model}}ByIdAction;
use App\Containers\{{section-name}}\{{container-name}}\Actions\GetAll{{models}}Action;
use App\Containers\{{section-name}}\{{container-name}}\Actions\Update{{model}}Action;
use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests\Create{{model}}Request;
use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests\Delete{{model}}Request;
use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests\Find{{model}}ByIdRequest;
use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests\GetAll{{models}}Request;
use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests\Update{{model}}Request;
use App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Transformers\{{model}}Transformer;
use App\Ship\Exceptions\CreateResourceFailedException;
use App\Ship\Exceptions\DeleteResourceFailedException;
use App\Ship\Exceptions\NotFoundException;
use App\Ship\Exceptions\UpdateResourceFailedException;
use App\Ship\Parents\Controllers\{{base-controller}};
use Illuminate\Http\JsonResponse;
use Prettus\Repository\Exceptions\RepositoryException;

class {{class-name}} extends {{base-controller}}
{
    /**
     * @throws InvalidTransformerException
     * @throws CreateResourceFailedException
     * @throws IncorrectIdException
     */
    public function create{{model}}(Create{{model}}Request $request): JsonResponse
    {
        ${{entity}} = app(Create{{model}}Action::class)->run($request->toTransporter());

        return $this->created($this->transform(${{entity}}, {{model}}Transformer::class));
    }

    /**
     * @throws InvalidTransformerException
     * @throws NotFoundException
     */
    public function find{{model}}ById(Find{{model}}ByIdRequest $request): array
    {
        ${{entity}} = app(Find{{model}}ByIdAction::class)->run($request->toTransporter());

        return $this->transform(${{entity}}, {{model}}Transformer::class);
    }

    /**
     * @throws InvalidTransformerException
     * @throws CoreInternalErrorException
     * @throws RepositoryException
     */
    public function getAll{{models}}(GetAll{{models}}Request $request): array
    {
        ${{entities}} = app(GetAll{{models}}Action::class)->run();

        return $this->transform(${{entities}}, {{model}}Transformer::class);
    }

    /**
     * @throws IncorrectIdException
     * @throws InvalidTransformerException
     * @throws NotFoundException
     * @throws UpdateResourceFailedException
     */
    public function update{{model}}(Update{{model}}Request $request): array
    {
        ${{entity}} = app(Update{{model}}Action::class)->run($request->toTransporter());

        return $this->transform(${{entity}}, {{model}}Transformer::class);
    }

    /**
     * @throws DeleteResourceFailedException
     * @throws NotFoundException
     */
    public function delete{{model}}(Delete{{model}}Request $request): JsonResponse
    {
        app(Delete{{model}}Action::class)->run($request->toTransporter());

        return $this->noContent();
    }
}
