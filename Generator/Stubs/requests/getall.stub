<?php

declare(strict_types=1);

namespace App\Containers\{{section-name}}\{{container-name}}\UI\{{user-interface}}\Requests;

use {{transporterNamespace}};
use App\Ship\Parents\Requests\Request as ParentRequest;
use App\Ship\Parents\Traits\RequestWithoutRulesTrait;
use OpenApi\Attributes\Get;
use OpenApi\Attributes\Items;
use OpenApi\Attributes\JsonContent;
use OpenApi\Attributes\Property;
use OpenApi\Attributes\Response;

#[Get(
    path: '/{{container-name-lower}}s',
    description: 'Get all {{container-name}}',
    summary: 'Get all {{container-name}}',
    security: [['bearerAuth'=>[]]],
    tags: ['{{container-name}}'],
    responses: [
        new Response(
            response: 200,
            description: '{{container-name}}s',
            content: new JsonContent(properties: [new Property(property: 'data', type: 'array', items: new Items(ref: '#/components/schemas/{{container-name}}'))])
        ),
        new \OpenApi\Attributes\Response(
            response: 403,
            description: 'Forbidden'
        ),
    ]
)]
class {{class-name}} extends ParentRequest
{
    use RequestWithoutRulesTrait;

    /**
     * Define which Roles and/or Permissions has access to this request.
     */
    protected array $access = [
        'permissions' => '',
        'roles'       => '',
    ];

    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return $this->check([
            'hasAccess',
        ]);
    }

    /**
     * The assigned Transporter for this Request.
     */
    public function toTransporter(array $payload = []): {{transporterClass}}
    {
        return {{transporterClass}}::fromRequest($this, $payload);
    }
}
